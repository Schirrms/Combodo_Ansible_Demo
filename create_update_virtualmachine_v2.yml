# create_update_virtualmachine_v2.yml
# This playbook is an example on how to use itop.core.write.yml playbook to create or update a Virtual Machine.
# The following parameters need to be set before calling the playbook
#  - obj_class = Class of CI to be written
#  - key = Set of attributes to be used for the reconciliation
#  - fields = Set of attributes to be used for update or creation
#  - output_fields = List of attributes to get from iTop once creation or update is done
# These can be set manually or result from the output of other playbooks, modules...
#
# Update : if the vm_move2prod is not populated and if the object is to be created
# then the vm_move2prod is set to the current date.
# This is to illustrate one possible use of the `itop.core.ispresent` role
#
---
- name: Create a Virtual Machine in iTop
  hosts: localhost
  gather_facts: true # needed to have the current date!

  tasks:
    - name: Set variables for the VM creation/update
      ansible.builtin.set_fact:
        itop_obj_class: "VirtualMachine"
        itop_key:
          "name": "{{ vm_name }}"
          "org_id":
            "name": "{{ org_name }}"
          "virtualhost_id":
            "name": "{{ vm_host }}"
        itop_fields:
          "name": "{{ vm_name }}"
          "org_id":
            "name": "{{ org_name }}"
          "status": "production"
          "virtualhost_id":
            "name": "{{ vm_host }}"
            "org_id":
              "name": "{{ org_name }}"
          "osfamily_id":
            "name": "{{ vm_osfamily }}"
          "osversion_id":
            "name": "{{ vm_osversion }}"
            "osfamily_id":
              "name": "{{ vm_osfamily }}"
          "cpu": "{{ vm_cpu }}"
          "ram": "{{ vm_ram }}"
          "managementip": "{{ vm_ip }}"

    - name: Set the move to production date to today if needed
      when: (vm_move2prod is undefined) or (vm_move2prod is not ansible.builtin.regex("^\d{4}-\d{2}-\d{2}$"))
      block:
        - name: Check if the VM already exists in iTop
          ansible.builtin.import_role:
            name: schirrms.combodo_ansible.itop_core
            tasks_from: ispresent
          vars:
            itop_core_ispresent_obj_class: "{{ itop_obj_class }}"
            itop_core_ispresent_key: "{{ itop_key }}"

        - name: Set the current date as 'move2production' only in case of a VM creation
          ansible.builtin.set_fact:
            itop_fields: "{{ itop_fields | combine({'move2production': ansible_date_time.date}) }}"
          when: itop_core_ispresent_found_items | int == 0

    - name: Merge static mode2production date if defined
      ansible.builtin.set_fact:
        itop_fields: "{{ itop_fields | combine({'move2production': vm_move2prod}) }}"
      when:
        - vm_move2prod is defined
        - vm_move2prod is ansible.builtin.regex("^\d{4}-\d{2}-\d{2}$")

    - name: Call iTop role to create or update the VM
      ansible.builtin.import_role:
        name: schirrms.combodo_ansible.itop_core
        tasks_from: write
      vars:
        itop_core_write_obj_class: "{{ itop_obj_class }}"
        itop_core_write_key: "{{ itop_key }}"
        itop_core_write_fields: "{{ itop_fields }}"

    - name: Store the VM id for future use
      ansible.builtin.set_fact:
        ci_id: "{{ itop_core_write_obj_key[0] }}"

    - name: Set interfaces for the VM
      ansible.builtin.include_tasks: create_update_vm_interfaces_sub_v2.yml
      loop: "{{ vm_interfaces }}"

    - name: Set contacts for the VM
      ansible.builtin.include_tasks: create_update_link_users_sub_v2.yml
      loop: "{{ vm_contacts }}"
